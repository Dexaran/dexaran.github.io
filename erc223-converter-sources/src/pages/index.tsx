// @ts-nocheck
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.scss'
import {
  Address,
  useAccount,
  useBalance, useChainId,
  useConnect,
  useContractRead,
  useContractWrite, useDisconnect, useNetwork,
  usePrepareContractWrite,
  useWaitForTransaction
} from "wagmi";
import {useWeb3Modal, Web3Button} from "@web3modal/react";
import testTokenABI from "../constants/abi/test-token.json";
import ERC20ABI from "../constants/abi/erc20.json";
import ERC223ABI from "../constants/abi/erc223.json";
import TokenConverterABI from "../constants/abi/tokenConverter.json";
import {useEffect, useMemo, useState} from "react";
import {formatEther, parseEther} from "viem";
import clsx from "clsx";
import {Manrope} from "next/font/google";
import Checkbox from "../components/Checkbox";
import {callisto} from "../constants/chains/clo";
import { useSwitchNetwork } from 'wagmi'


const CLOConverterContractAddress = "0xB83b6a34802bb4149834110c28e3E0e270d804A8";
const testTokenAddress: Address = "0x9e3549954138E52C230aCB92A9358C3842ABEb41";
const soyAddress = "0x9FaE2529863bD691B4A7171bDfCf33C7ebB10a65";
const manrope = Manrope({subsets: ['latin']});

export default function Home() {
  const [hasMounted, setHasMounted] = useState(false);
  const [amountToConvert, setAmountToConvert] = useState("");

  const {address, isConnected} = useAccount();

  const {open, close, setDefaultChain} = useWeb3Modal();

  const {switchNetwork} = useSwitchNetwork()
  const {disconnect} = useDisconnect();
  const {chain, chains} = useNetwork();

  const isNetworkSupported = useMemo(() => {
    if (chain && chain.id === 820) {
      return true;
    }

    return false;
  }, [chain]);

  const {data} = useBalance({
    address,
    token: testTokenAddress,
    watch: true
  });

  const {data: soyBalance} = useBalance({
    address,
    token: soyAddress,
    watch: true
  });

  const {isLoading, isSuccess, write} = useContractWrite({
    address: testTokenAddress,
    abi: testTokenABI,
    functionName: 'giveAway',
    args: [parseEther("100")]
  });

  const {data: readData} = useContractRead({
    address: testTokenAddress,
    abi: ERC20ABI,
    functionName: "allowance",
    args: [
      address,
      CLOConverterContractAddress
    ],
    watch: true
  });


  const {config: allowanceConfig} = usePrepareContractWrite({
    address: testTokenAddress,
    abi: ERC20ABI,
    functionName: "approve",
    args: [
      CLOConverterContractAddress,
      parseEther(amountToConvert)
    ]
  });

  const {write: writeTokenApprove, data: allowanceData} = useContractWrite(allowanceConfig);

  const {data: approvingData, isLoading: approving} = useWaitForTransaction({
    hash: allowanceData?.hash
  })

  const {config, data: configData} = usePrepareContractWrite({
    address: CLOConverterContractAddress,
    abi: TokenConverterABI,
    functionName: 'convertERC20toERC223',
    args: [
      testTokenAddress,
      parseEther(amountToConvert)
    ],
  });

  const {write: writeConvert} = useContractWrite(config);

  const {data: erc223Address} = useContractRead({
    address: CLOConverterContractAddress,
    abi: TokenConverterABI,
    functionName: "getWrapperFor",
    args: [
      testTokenAddress
    ]
  });

  const {data: testToken223Balance} = useBalance({
    address,
    token: erc223Address,
    watch: true
  });

  useEffect(() => {
    setHasMounted(true);
  }, []);

  const isEnoughBalance = useMemo(() => {
    if (!data?.formatted) {
      return false;
    }

    return +data.formatted >= +amountToConvert;
  }, [amountToConvert, data?.formatted]);

  if (!hasMounted) {
    return null;
  }

  return (
    <>
      <Head>
        <title>ERC223 Convertor</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <main className={clsx(styles.main, manrope.className)}>

        <div className={styles.contentBlock}>
          <div className={styles.contentBlockHeader}>
            <h1 className={styles.h1}>Ethereum Token Converter</h1>
            <p className={styles.description}>This is a token converter that converts ERC-20 tokens to ERC-223.
              It can also convert ERC-223 tokens back to ERC-20 at any time. No fees are charged.
              Read more about the conversion process <a href="#">here.</a></p>
          </div>
          <div className={styles.converter}>
            <div className={styles.infoLabel}>
              <span className={styles.infoIcon}>
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32" fill="none">
                  <path
                    d="M15.3842 27.4922C13.7513 27.4922 12.2123 27.1797 10.767 26.5547C9.32947 25.9297 8.05994 25.0664 6.95837 23.9648C5.85681 22.8633 4.99353 21.5938 4.36853 20.1562C3.74353 18.7109 3.43103 17.1719 3.43103 15.5391C3.43103 13.9062 3.74353 12.3711 4.36853 10.9336C4.99353 9.48828 5.85291 8.21484 6.94666 7.11328C8.04822 6.01172 9.31775 5.14844 10.7552 4.52344C12.2006 3.89844 13.7396 3.58594 15.3724 3.58594C17.0052 3.58594 18.5443 3.89844 19.9896 4.52344C21.4349 5.14844 22.7084 6.01172 23.8099 7.11328C24.9115 8.21484 25.7748 9.48828 26.3998 10.9336C27.0248 12.3711 27.3373 13.9062 27.3373 15.5391C27.3373 17.1719 27.0248 18.7109 26.3998 20.1562C25.7748 21.5938 24.9115 22.8633 23.8099 23.9648C22.7084 25.0664 21.4349 25.9297 19.9896 26.5547C18.5521 27.1797 17.017 27.4922 15.3842 27.4922ZM15.3842 25.5C16.767 25.5 18.0599 25.2422 19.2631 24.7266C20.4662 24.2109 21.5248 23.5 22.4388 22.5938C23.3529 21.6797 24.0638 20.6211 24.5717 19.418C25.0873 18.2148 25.3451 16.9219 25.3451 15.5391C25.3451 14.1562 25.0873 12.8633 24.5717 11.6602C24.056 10.457 23.3412 9.39844 22.4271 8.48438C21.5209 7.57031 20.4623 6.85938 19.2513 6.35156C18.0482 5.83594 16.7552 5.57812 15.3724 5.57812C13.9896 5.57812 12.6967 5.83594 11.4935 6.35156C10.2904 6.85938 9.23572 7.57031 8.32947 8.48438C7.42322 9.39844 6.71228 10.457 6.19666 11.6602C5.68884 12.8633 5.43494 14.1562 5.43494 15.5391C5.43494 16.9219 5.68884 18.2148 6.19666 19.418C6.71228 20.6211 7.42322 21.6797 8.32947 22.5938C9.24353 23.5 10.3021 24.2109 11.5052 24.7266C12.7084 25.2422 14.0013 25.5 15.3842 25.5ZM13.3334 22.0898C13.0912 22.0898 12.8881 22.0117 12.724 21.8555C12.5599 21.6992 12.4779 21.5039 12.4779 21.2695C12.4779 21.0352 12.5599 20.8398 12.724 20.6836C12.8881 20.5273 13.0912 20.4492 13.3334 20.4492H14.7865V15.0703H13.5326C13.2904 15.0703 13.0873 14.9922 12.9232 14.8359C12.7592 14.6797 12.6771 14.4844 12.6771 14.25C12.6771 14.0156 12.7592 13.8203 12.9232 13.6641C13.0873 13.5078 13.2904 13.4297 13.5326 13.4297H15.7357C16.0326 13.4297 16.2592 13.5273 16.4154 13.7227C16.5717 13.9102 16.6498 14.1641 16.6498 14.4844V20.4492H18.1029C18.3451 20.4492 18.5482 20.5273 18.7123 20.6836C18.8763 20.8398 18.9584 21.0352 18.9584 21.2695C18.9584 21.5039 18.8763 21.6992 18.7123 21.8555C18.5482 22.0117 18.3451 22.0898 18.1029 22.0898H13.3334ZM15.2787 11.4727C14.8568 11.4727 14.4974 11.3242 14.2006 11.0273C13.9037 10.7305 13.7552 10.3711 13.7552 9.94922C13.7552 9.51953 13.9037 9.15625 14.2006 8.85938C14.4974 8.5625 14.8568 8.41406 15.2787 8.41406C15.7084 8.41406 16.0677 8.5625 16.3568 8.85938C16.6537 9.15625 16.8021 9.51953 16.8021 9.94922C16.8021 10.3711 16.6537 10.7305 16.3568 11.0273C16.0677 11.3242 15.7084 11.4727 15.2787 11.4727Z"
                    fill="currentColor"/>
                </svg>
              </span>
              <p className={styles.infoText}>You are converting your ERC-20 token to ERC-223 token</p>
            </div>
            <div className={styles.fromLabel}>
              <span>From</span>
              <span>ERC-20</span>
            </div>
            <div className={styles.switchButtonWrapper}>
              <button className={styles.switchButton}>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                  <path
                    d="M13.1248 7.34922C12.9748 7.49922 12.7998 7.57422 12.5998 7.57422C12.3998 7.57422 12.2248 7.49922 12.0748 7.34922L9.5748 4.84922V11.9992C9.5748 12.2159 9.50397 12.3951 9.3623 12.5367C9.22064 12.6784 9.04147 12.7492 8.8248 12.7492C8.60814 12.7492 8.42897 12.6784 8.2873 12.5367C8.14564 12.3951 8.0748 12.2159 8.0748 11.9992V4.84922L5.5498 7.37422C5.3998 7.52422 5.22897 7.59505 5.0373 7.58672C4.84564 7.57839 4.6748 7.49922 4.5248 7.34922C4.3748 7.19922 4.2998 7.02422 4.2998 6.82422C4.2998 6.62422 4.3748 6.44922 4.5248 6.29922L8.2998 2.52422C8.38314 2.44088 8.46647 2.38255 8.5498 2.34922C8.63314 2.31589 8.7248 2.29922 8.8248 2.29922C8.9248 2.29922 9.01647 2.31589 9.0998 2.34922C9.18314 2.38255 9.26647 2.44088 9.3498 2.52422L13.1498 6.32422C13.2998 6.47422 13.3706 6.64505 13.3623 6.83672C13.354 7.02839 13.2748 7.19922 13.1248 7.34922ZM19.4748 17.6992L15.6998 21.4742C15.6165 21.5576 15.5331 21.6159 15.4498 21.6492C15.3665 21.6826 15.2748 21.6992 15.1748 21.6992C15.0748 21.6992 14.9831 21.6826 14.8998 21.6492C14.8165 21.6159 14.7331 21.5576 14.6498 21.4742L10.8498 17.6742C10.6998 17.5242 10.629 17.3534 10.6373 17.1617C10.6456 16.9701 10.7248 16.7992 10.8748 16.6492C11.0248 16.4992 11.1998 16.4242 11.3998 16.4242C11.5998 16.4242 11.7748 16.4992 11.9248 16.6492L14.4248 19.1492V11.9992C14.4248 11.7826 14.4956 11.6034 14.6373 11.4617C14.779 11.3201 14.9581 11.2492 15.1748 11.2492C15.3915 11.2492 15.5706 11.3201 15.7123 11.4617C15.854 11.6034 15.9248 11.7826 15.9248 11.9992V19.1492L18.4498 16.6242C18.5998 16.4742 18.7706 16.4034 18.9623 16.4117C19.154 16.4201 19.3248 16.4992 19.4748 16.6492C19.6248 16.7992 19.6998 16.9742 19.6998 17.1742C19.6998 17.3742 19.6248 17.5492 19.4748 17.6992Z"
                    fill="#FDFFFC"/>
                </svg>
              </button>
            </div>
            <div className={styles.toLabel}>
              <span>To</span>
              <span>ERC-223</span>
            </div>

            <div className={styles.customContractAddressWrapper}>
              <Checkbox checked={true} id="customContractAddress" handleChange={() => null}/>
              <p>Custom contract address</p>
            </div>

            {isConnected && !isNetworkSupported &&
            <div className={styles.notSupported}>
              Convertor for {chain?.name} is not supported yet
              <button onClick={() => switchNetwork?.(820)} className={styles.convertButton}>Change to callisto</button>
            </div>}

            {(isNetworkSupported || !isConnected) && <div className={styles.converterFieldsWrapper}>
              <div className={styles.converterFieldsLabel}>Token to convert</div>
              <div className={styles.converterFields}>
                <div className={styles.amountInputWrapper}>
                  <input value={amountToConvert} onChange={(e) => {
                    setAmountToConvert(e.target.value);
                  }} placeholder="0" className={styles.amountInput} type="text"/>
                  <button onClick={() => {
                    setAmountToConvert(data.formatted);
                  }} className={styles.maxButton}>MAX
                  </button>
                </div>
                <button className={styles.pickTokenButton}>
                  <span className={styles.tokenName}>
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <circle cx="12" cy="12" r="12" fill="#292B28"/>
                      <path fill-rule="evenodd" clip-rule="evenodd"
                            d="M5.33316 2.02236C7.30655 0.703788 9.62663 0 12 0C15.1826 0 18.2348 1.26428 20.4853 3.51472C22.7357 5.76515 24 8.8174 24 12C24 14.3734 23.2962 16.6935 21.9776 18.6668C20.6591 20.6402 18.7849 22.1783 16.5922 23.0866C14.3995 23.9948 11.9867 24.2324 9.65892 23.7694C7.33115 23.3064 5.19295 22.1635 3.51472 20.4853C1.83649 18.807 0.693605 16.6689 0.230582 14.3411C-0.232441 12.0133 0.00519943 9.60051 0.913451 7.4078C1.8217 5.21508 3.35977 3.34094 5.33316 2.02236ZM6.28557 20.5523C7.97704 21.6825 9.96568 22.2857 12 22.2857C14.7279 22.2857 17.3442 21.202 19.2731 19.2731C21.202 17.3441 22.2857 14.7279 22.2857 12C22.2857 9.96568 21.6825 7.97704 20.5523 6.28556C19.4221 4.59409 17.8156 3.27574 15.9362 2.49724C14.0567 1.71874 11.9886 1.51505 9.99336 1.91192C7.99813 2.3088 6.16539 3.28842 4.72691 4.7269C3.28842 6.16538 2.3088 7.99812 1.91193 9.99336C1.51505 11.9886 1.71874 14.0567 2.49724 15.9362C3.27575 17.8156 4.59409 19.422 6.28557 20.5523ZM7.23797 4.87312C8.64754 3.93128 10.3047 3.42857 12 3.42857C14.2733 3.42857 16.4535 4.33163 18.0609 5.93908C19.6684 7.54654 20.5714 9.72671 20.5714 12C20.5714 13.6953 20.0687 15.3525 19.1269 16.762C18.185 18.1716 16.8464 19.2702 15.2801 19.919C13.7139 20.5677 11.9905 20.7375 10.3278 20.4067C8.66511 20.076 7.13782 19.2596 5.93909 18.0609C4.74035 16.8622 3.924 15.3349 3.59327 13.6722C3.26254 12.0095 3.43228 10.2861 4.08104 8.71985C4.72979 7.15363 5.82841 5.81496 7.23797 4.87312ZM11.3939 7.96534C11.2332 8.12608 11.1429 8.3441 11.1429 8.57143V10.2857C11.1429 10.513 11.2332 10.7311 11.3939 10.8918C11.5547 11.0525 11.7727 11.1429 12 11.1429C12.2273 11.1429 12.4453 11.0525 12.6061 10.8918C12.7668 10.7311 12.8571 10.513 12.8571 10.2857V8.57143C12.8571 8.3441 12.7668 8.12608 12.6061 7.96534C12.4453 7.80459 12.2273 7.71428 12 7.71428C11.7727 7.71428 11.5547 7.80459 11.3939 7.96534ZM8.57143 12.8571H10.2857C10.513 12.8571 10.7311 12.7668 10.8918 12.6061C11.0526 12.4453 11.1429 12.2273 11.1429 12C11.1429 11.7727 11.0526 11.5547 10.8918 11.3939C10.7311 11.2332 10.513 11.1429 10.2857 11.1429H8.57143C8.3441 11.1429 8.12608 11.2332 7.96534 11.3939C7.80459 11.5547 7.71429 11.7727 7.71429 12C7.71429 12.2273 7.80459 12.4453 7.96534 12.6061C8.12608 12.7668 8.3441 12.8571 8.57143 12.8571ZM12.6061 16.0347C12.7668 15.8739 12.8571 15.6559 12.8571 15.4286V13.7143C12.8571 13.487 12.7668 13.2689 12.6061 13.1082C12.4453 12.9474 12.2273 12.8571 12 12.8571C11.7727 12.8571 11.5547 12.9474 11.3939 13.1082C11.2332 13.2689 11.1429 13.487 11.1429 13.7143V15.4286C11.1429 15.6559 11.2332 15.8739 11.3939 16.0347C11.5547 16.1954 11.7727 16.2857 12 16.2857C12.2273 16.2857 12.4453 16.1954 12.6061 16.0347ZM13.7143 12.8571H15.4286C15.6559 12.8571 15.8739 12.7668 16.0347 12.6061C16.1954 12.4453 16.2857 12.2273 16.2857 12C16.2857 11.7727 16.1954 11.5547 16.0347 11.3939C15.8739 11.2332 15.6559 11.1429 15.4286 11.1429H13.7143C13.487 11.1429 13.2689 11.2332 13.1082 11.3939C12.9474 11.5547 12.8571 11.7727 12.8571 12C12.8571 12.2273 12.9474 12.4453 13.1082 12.6061C13.2689 12.7668 13.487 12.8571 13.7143 12.8571Z"
                            fill="#7D857B"/>
                    </svg>
                    TEST
                  </span>
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                    <path
                      d="M11.6641 15.9521C11.8838 15.9521 12.0771 15.8643 12.2441 15.6973L19.0557 8.73633C19.2139 8.57812 19.293 8.38477 19.293 8.15625C19.293 7.70801 18.9502 7.35645 18.4932 7.35645C18.2646 7.35645 18.0713 7.44434 17.9219 7.58496L11.6641 13.9834L5.40625 7.58496C5.25684 7.44434 5.05469 7.35645 4.83496 7.35645C4.37793 7.35645 4.03516 7.70801 4.03516 8.15625C4.03516 8.38477 4.11426 8.57812 4.26367 8.73633L11.084 15.6973C11.2422 15.8643 11.4443 15.9521 11.6641 15.9521Z"
                      fill="#C3D8D5"/>
                  </svg>
                </button>
              </div>
              <div className={styles.helperText}>
                Balance: {data?.formatted} TEST (ERC-20) | {testToken223Balance?.formatted} TEST (ERC-223)
              </div>
              <div className={styles.actionButtonWrapper}>
                {!isConnected
                  ? <button onClick={open} className={styles.convertButton}>Connect wallet</button>
                  : <>
                    {!isEnoughBalance && <button disabled className={styles.convertButton}>Insufficient amount</button>}
                    {isEnoughBalance && !readData &&
                    <button onClick={writeTokenApprove} className={styles.convertButton}>Approve test tokens</button>}
                    {isEnoughBalance && readData && +amountToConvert > +formatEther(readData) &&
                    <button onClick={writeTokenApprove} className={styles.convertButton}>Approve test tokens</button>}
                    {isEnoughBalance && readData && +amountToConvert <= +formatEther(readData) &&
                    <button disabled={!amountToConvert} onClick={writeConvert} className={styles.convertButton}>
                      {amountToConvert ? "Convert to ERC-223" : "Enter amount"}
                    </button>}
                  </>
                }
              </div>
            </div>}
          </div>
          <div className={styles.temporaryBlock}>
            <div className={styles.converterFieldsLabel}>This block is temporary and will be removed</div>
            {isConnected && <div className={styles.buttons}>
              <button disabled={!isNetworkSupported} onClick={write} className={styles.getTestTokens}>Get 100 test tokens</button>
              <button onClick={open} className={styles.getTestTokens}>Wallet</button>
            </div>}

            <div className={styles.address}>Account: {address ? address : "Not connected"}</div>
            <div/>
          </div>
        </div>
      </main>
    </>
  )
}
