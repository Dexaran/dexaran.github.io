import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.scss'
import {
  Address,
  useAccount,
  useBalance, 
  useContractRead,
  useContractWrite, useDisconnect, useNetwork,
} from "wagmi";
import {useWeb3Modal, Web3Button} from "@web3modal/react";
import testTokenABI from "../constants/abi/test-token.json";
import ERC20ABI from "../constants/abi/erc20.json";
import ERC223ABI from "../constants/abi/erc223.json";
import TokenConverterABI from "../constants/abi/tokenConverter.json";
import {useEffect, useMemo, useState} from "react";
import {formatEther, parseEther} from "viem";
import clsx from "clsx";
import {Manrope} from "next/font/google";
import Checkbox from "../components/Checkbox";
import {callisto} from "../constants/chains/clo";
import { useSwitchNetwork } from 'wagmi'
import { ConverterIcons } from '@/components/ConverterIcons';
import ChangeNetwork from '@/components/ChangeNetwork/ChangeNetwork';
import SelectTokent from '@/components/SelectTokent/SelectTokent';
import { ConvertToERC223, ConvertToERC20 } from '@/components/ConvertButton/ConvertButton';


const CLOConverterContractAddress = "0xB83b6a34802bb4149834110c28e3E0e270d804A8";
const TEST_TOKEN_ERC20_ADDRESS: Address = "0x9e3549954138E52C230aCB92A9358C3842ABEb41";
const TEST_TOKEN_ERC223_ADDRESS: Address = "0x3133Be95A145C79240507D3aB09b1F41077041ad";
const soyAddress = "0x9FaE2529863bD691B4A7171bDfCf33C7ebB10a65";
export const manrope = Manrope({subsets: ['latin']});

export default function Home() {
  const [hasMounted, setHasMounted] = useState(false);
  const [amountToConvert, setAmountToConvert] = useState("");
  const [toERC223, setToERC223] = useState(true);
  const [tokenAddress, setTokenAddress] = useState();

  const {address, isConnected} = useAccount();

  const {open, close, setDefaultChain} = useWeb3Modal();

  const {switchNetwork} = useSwitchNetwork()
  const {disconnect} = useDisconnect();
  const {chain, chains} = useNetwork();

  const isNetworkSupported = useMemo(() => {
    if (chain && chain.id === 820) {
      return true;
    }

    return false;
  }, [chain]);

  const {data:tokenBalanceERC20} = useBalance({
    address,
    token: tokenAddress,
    watch: true
  });

  const {data: tokenAddressERC223} = useContractRead({
    address: CLOConverterContractAddress,
    abi: TokenConverterABI,
    functionName: "getWrapperFor",
    args: [
      tokenAddress
    ]
  });

  const {data: tokenBalanceERC223} = useBalance({
    address,
    token: tokenAddressERC223 as any,
    watch: true
  });

  const {isLoading, isSuccess, write} = useContractWrite({
    address: TEST_TOKEN_ERC20_ADDRESS as any,
    abi: testTokenABI,
    functionName: 'giveAway',
    args: [parseEther("100")]
  });


  useEffect(() => {
    setHasMounted(true);
  }, []);

  if (!hasMounted) {
    return null;
  }

  return (
    <>
      <Head>
        <title>ERC223 Convertor</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <main className={clsx(styles.main, manrope.className)}>

        <div className={styles.contentBlock}>
          <div className={styles.contentBlockHeader}>
            <h1 className={styles.h1}>Ethereum Token Converter</h1>
            <p className={styles.description}>This is a token converter that converts ERC-20 tokens to ERC-223.
              It can also convert ERC-223 tokens back to ERC-20 at any time. No fees are charged.
              Read more about the conversion process <a href="#">here.</a></p>
          </div>
          <ChangeNetwork />
          <div className={styles.converter}>
            <div className={styles.infoLabel}>
              <span className={styles.infoIcon}>
                <ConverterIcons name="info" size="32px" />
              </span>
              <p className={styles.infoText}>You are converting your ERC-20 token to ERC-223 token</p>
            </div>
            <div className={styles.fromLabel}>
              <span>From</span>
              <span>{toERC223 ? "ERC-20" : "ERC-223"}</span>
            </div>
            <div className={styles.switchButtonWrapper}>
              <button className={`${styles.switchButton} ${toERC223 ? "" : styles.rotated}`} onClick={() => setToERC223(!toERC223)}>
                <ConverterIcons name="swap" fill="#FDFFFC" />
              </button>
            </div>
            <div className={styles.toLabel}>
              <span>To</span>
              <span>{toERC223 ? "ERC-223" : "ERC-20"}</span>
            </div>
            {isConnected && !isNetworkSupported &&
              <div className={styles.notSupported}>
                Convertor for {chain?.name} is not supported yet
                <button onClick={() => switchNetwork?.(820)} className={styles.convertButton}>Change to callisto</button>
              </div>
            }

            {(isNetworkSupported || !isConnected) && <div className={styles.converterFieldsWrapper}>
              <SelectTokent
                amountToConvert={amountToConvert}
                setAmountToConvert={setAmountToConvert}
                tokenAddress={tokenAddress}
                setTokenAddress={setTokenAddress}
                tokenBalanceERC20={tokenBalanceERC20}
                tokenBalanceERC223={tokenBalanceERC223}
              />
              {toERC223 ?
                <ConvertToERC223
                  amountToConvert={amountToConvert}
                  tokenAddress={tokenAddress}
                  tokenBalanceERC20={tokenBalanceERC20}
                /> :
                <ConvertToERC20
                  amountToConvert={amountToConvert}
                  tokenAddressERC223={tokenAddressERC223}
                  tokenBalanceERC223={tokenBalanceERC223}
                />
              }
            </div>}
          </div>
          <div className={styles.temporaryBlock}>
            <div className={styles.converterFieldsLabel}>This block is temporary and will be removed</div>
            {isConnected && <div className={styles.buttons}>
              <button disabled={!isNetworkSupported} onClick={write} className={styles.getTestTokens}>Get 100 test tokens</button>
              <button onClick={open} className={styles.getTestTokens}>Wallet</button>
            </div>}

            <div className={styles.address}>Account: {address ? address : "Not connected"}</div>
            <div/>
          </div>
        </div>
      </main>
    </>
  )
}
